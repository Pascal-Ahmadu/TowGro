name: Auth Service CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  DB_HOST: localhost
  DB_PORT: 5432
  DB_USER: testuser
  DB_PASS: testpass
  DB_NAME: testdb
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm install --legacy-peer-deps
      env:
        NODE_OPTIONS: --openssl-legacy-provider

    - name: Copy environment file
      run: |
        if [ -f .env.example ]; then
          cp .env.example .env
        else
          echo "Warning: .env.example not found, creating basic .env"
          echo "NODE_ENV=test" > .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
        fi

    - name: Lint code
      run: npm run lint

    - name: Run unit tests
      run: npm run test:cov

    - name: Run e2e tests
      run: npm run test:e2e

    - name: Upload test results
      uses: actions/upload-artifact@v4  # Changed from v3 to v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info

    - name: Build production
      run: npm run build
      if: github.ref == 'refs/heads/main'

    - name: Deploy to Render
      if: github.ref == 'refs/heads/main'
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -s -X POST \
          -H "Accept: application/json" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -d '{
            "clearCache": "clear"
          }'